name: Dependency and Security Check
permissions:
  contents: read

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run daily at 2 AM UTC to catch new vulnerabilities
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      strict_mode:
        description: 'Fail on warnings (true/false)'
        required: false
        default: 'false'

jobs:
  python-dependency-check:
    name: Python Dependency Analysis
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: Install dependencies and analysis tools
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pip-audit safety vulture pipdeptree pip-autoremove bandit

      - name: Check for security vulnerabilities with pip-audit
        id: pip_audit
        continue-on-error: true
        run: |
          echo "## üîí Security Audit with pip-audit" >> $GITHUB_STEP_SUMMARY
          pip-audit --desc --fix --dry-run 2>&1 | tee audit-report.txt
          if grep -q "found vulnerabilities" audit-report.txt; then
            echo "vulnerabilities_found=true" >> $GITHUB_OUTPUT
            cat audit-report.txt >> $GITHUB_STEP_SUMMARY
          else
            echo "‚úÖ No vulnerabilities found" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Check for known security issues with safety
        id: safety_check
        continue-on-error: true
        run: |
          echo "## üõ°Ô∏è Safety Security Check" >> $GITHUB_STEP_SUMMARY
          safety check --json --output safety-report.json || true
          python3 scripts/ci_check_safety.py >> $GITHUB_STEP_SUMMARY

      - name: Detect unused dependencies
        id: unused_deps
        continue-on-error: true
        run: |
          echo "## üì¶ Unused Dependencies Analysis" >> $GITHUB_STEP_SUMMARY
          python3 scripts/ci_check_unused.py >> $GITHUB_STEP_SUMMARY || echo "unused_found=true" >> $GITHUB_OUTPUT

      - name: Detect dead code with vulture
        id: dead_code
        continue-on-error: true
        run: |
          echo "## ü¶Ö Dead Code Detection" >> $GITHUB_STEP_SUMMARY
          
          # Create vulture whitelist for common false positives
          echo "# Whitelist for vulture - add false positives here" > .vulture_whitelist.py
          echo "_.id  # SQLAlchemy models" >> .vulture_whitelist.py
          echo "_.created_at  # SQLAlchemy models" >> .vulture_whitelist.py
          echo "_.updated_at  # SQLAlchemy models" >> .vulture_whitelist.py
          echo "_.metadata  # SQLAlchemy models" >> .vulture_whitelist.py
          echo "_.query  # SQLAlchemy models" >> .vulture_whitelist.py
          echo "_.session  # SQLAlchemy models" >> .vulture_whitelist.py
          echo "_.__tablename__  # SQLAlchemy models" >> .vulture_whitelist.py
          echo "_.__table_args__  # SQLAlchemy models" >> .vulture_whitelist.py

          vulture devdocai tests --min-confidence 80 --exclude "*/migrations/*,*/__pycache__/*" .vulture_whitelist.py > vulture-report.txt 2>&1 || true
          
          if [ -s vulture-report.txt ]; then
            DEAD_CODE_COUNT=$(wc -l < vulture-report.txt)
            if [ $DEAD_CODE_COUNT -gt 0 ]; then
              echo "‚ö†Ô∏è Found $DEAD_CODE_COUNT potential dead code instances" >> $GITHUB_STEP_SUMMARY
              echo "First 10 instances:" >> $GITHUB_STEP_SUMMARY
              head -10 vulture-report.txt >> $GITHUB_STEP_SUMMARY
              echo "dead_code_found=true" >> $GITHUB_OUTPUT
            fi
          else
            echo "‚úÖ No dead code detected" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Code security analysis with bandit
        id: bandit
        continue-on-error: true
        run: |
          echo "## üîç Security Code Analysis (Bandit)" >> $GITHUB_STEP_SUMMARY
          bandit -r devdocai -f json -o bandit-report.json --severity-level medium || true
          python3 scripts/ci_check_bandit.py >> $GITHUB_STEP_SUMMARY

      - name: Generate dependency tree
        run: |
          echo "## üå≥ Dependency Tree" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          pipdeptree --warn silence | head -50 >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: Check results and fail if needed
        run: |
          STRICT_MODE="${{ github.event.inputs.strict_mode || 'false' }}"
          FAIL_BUILD=false
          
          if [[ "${{ steps.pip_audit.outputs.vulnerabilities_found }}" == "true" ]]; then
            echo "‚ùå Security vulnerabilities found!"
            FAIL_BUILD=true
          fi
          
          if [[ "${{ steps.unused_deps.outputs.unused_found }}" == "true" ]]; then
            echo "‚ö†Ô∏è Unused dependencies found!"
            if [[ "$STRICT_MODE" == "true" ]]; then
              FAIL_BUILD=true
            fi
          fi
          
          if [[ "${{ steps.dead_code.outputs.dead_code_found }}" == "true" ]]; then
            echo "‚ö†Ô∏è Dead code detected!"
            if [[ "$STRICT_MODE" == "true" ]]; then
              FAIL_BUILD=true
            fi
          fi
          
          if [[ "$FAIL_BUILD" == "true" ]]; then
            echo "## ‚ùå Build Failed" >> $GITHUB_STEP_SUMMARY
            echo "Security or quality issues detected. Please review the report above." >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "## ‚úÖ All Checks Passed" >> $GITHUB_STEP_SUMMARY
          fi

  nodejs-dependency-check:
    name: Node.js Dependency Analysis
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ['18.x', '20.x']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          
      - name: Install dependencies
        run: |
          npm ci
          npm install -g depcheck npm-audit-resolver better-npm-audit

      - name: Security audit with npm
        id: npm_audit
        continue-on-error: true
        run: |
          echo "## üîí NPM Security Audit" >> $GITHUB_STEP_SUMMARY
          
          # Run npm audit and capture results
          npm audit --json > npm-audit.json || true
          
          # Parse and display results
          node -e "
          const audit = require('./npm-audit.json');
          const vulns = audit.vulnerabilities || {};
          const count = Object.keys(vulns).length;
          
          if (count > 0) {
            console.log('‚ö†Ô∏è Found ' + count + ' vulnerabilities:');
            let shown = 0;
            for (const [name, details] of Object.entries(vulns)) {
              if (shown++ < 5) {
                console.log('  - ' + name + ': ' + details.severity + ' severity');
              }
            }
            process.exit(1);
          } else {
            console.log('‚úÖ No vulnerabilities found');
          }
          " >> $GITHUB_STEP_SUMMARY || echo "npm_vulnerabilities=true" >> $GITHUB_OUTPUT

      - name: Check for unused dependencies with depcheck
        id: depcheck
        continue-on-error: true
        run: |
          echo "## üì¶ Unused Dependencies Check (Node.js)" >> $GITHUB_STEP_SUMMARY
          
          # Create depcheck config
          echo '{' > .depcheckrc.json
          echo '  "ignores": ["@types/*", "eslint-*", "@typescript-eslint/*", "ts-node*", "typescript"],' >> .depcheckrc.json
          echo '  "skip-missing": false,' >> .depcheckrc.json
          echo '  "ignorePatterns": ["dist", "node_modules", "coverage", "*.test.ts", "*.spec.ts"]' >> .depcheckrc.json
          echo '}' >> .depcheckrc.json
          
          # Run depcheck
          depcheck --json > depcheck-report.json 2>&1 || true
          
          # Parse results
          node -e "
          try {
            const report = require('./depcheck-report.json');
            const unused = report.dependencies || [];
            const missing = report.missing || {};
            
            if (unused.length > 0) {
              console.log('‚ö†Ô∏è Unused dependencies found:');
              unused.forEach(dep => console.log('  - ' + dep));
              process.exit(1);
            } else {
              console.log('‚úÖ No unused dependencies');
            }
            
            if (Object.keys(missing).length > 0) {
              console.log('‚ö†Ô∏è Missing dependencies:');
              Object.keys(missing).slice(0, 5).forEach(dep => console.log('  - ' + dep));
            }
          } catch (e) {
            console.log('‚úÖ Dependency check completed');
          }
          " >> $GITHUB_STEP_SUMMARY || echo "unused_npm_deps=true" >> $GITHUB_OUTPUT

      - name: Check outdated dependencies
        continue-on-error: true
        run: |
          echo "## üìä Outdated Dependencies" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          npm outdated >> $GITHUB_STEP_SUMMARY 2>&1 || true
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: License compliance check
        continue-on-error: true
        run: |
          echo "## üìú License Compliance" >> $GITHUB_STEP_SUMMARY
          npx license-checker --summary >> $GITHUB_STEP_SUMMARY || true

      - name: Check results
        run: |
          STRICT_MODE="${{ github.event.inputs.strict_mode || 'false' }}"
          FAIL_BUILD=false
          
          if [[ "${{ steps.npm_audit.outputs.npm_vulnerabilities }}" == "true" ]]; then
            echo "‚ùå NPM security vulnerabilities found!"
            FAIL_BUILD=true
          fi
          
          if [[ "${{ steps.depcheck.outputs.unused_npm_deps }}" == "true" ]]; then
            echo "‚ö†Ô∏è Unused NPM dependencies found!"
            if [[ "$STRICT_MODE" == "true" ]]; then
              FAIL_BUILD=true
            fi
          fi
          
          if [[ "$FAIL_BUILD" == "true" ]]; then
            exit 1
          fi

  create-issue-on-failure:
    name: Create Issue on Failure
    runs-on: ubuntu-latest
    needs: [python-dependency-check, nodejs-dependency-check]
    if: failure() && github.event_name == 'schedule'
    
    steps:
      - name: Create issue for dependency problems
        uses: actions/github-script@v7
        with:
          script: |
            const title = `üîí Security: Dependency vulnerabilities detected - ${new Date().toISOString().split('T')[0]}`;
            const body = `## Automated Security Scan Results
            
            The scheduled dependency security scan has detected issues that need attention.
            
            ### Affected Components
            - Python dependencies: Check workflow run for details
            - Node.js dependencies: Check workflow run for details
            
            ### Action Required
            1. Review the [workflow run](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
            2. Update or remove vulnerable/unused dependencies
            3. Run \`npm audit fix\` and \`pip-audit --fix\` locally
            4. Submit a PR with fixes
            
            ### Priority
            - üî¥ **High**: Security vulnerabilities
            - üü° **Medium**: Unused dependencies
            - üü¢ **Low**: Outdated packages
            
            /cc @${context.actor}`;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['security', 'dependencies', 'automated']
            });