name: Monitoring & Observability Dashboard

on:
  schedule:
    - cron: '0 */6 * * *'  # Every 6 hours
  workflow_run:
    workflows: ["Enhanced 5-Pass CI/CD Pipeline"]
    types:
      - completed
  workflow_dispatch:

jobs:
  collect-metrics:
    name: Collect Development Metrics
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Environment
        uses: ./.github/actions/setup-environment
      
      - name: Collect Code Metrics
        id: code-metrics
        run: |
          echo "üìä Collecting code metrics..."
          
          # Lines of code by module
          for module in M001 M002 M003 M004 M005 M006 M007 M008 M009 M010 M011 M012 M013; do
            if [ -d "src/modules/$module" ]; then
              loc=$(find src/modules/$module -name "*.ts" -o -name "*.tsx" | xargs wc -l | tail -1 | awk '{print $1}')
              echo "${module}_LOC=$loc" >> metrics.env
            fi
          done
          
          # Test coverage by module
          npm test -- --coverage --silent 2>/dev/null || true
          
          # Complexity metrics
          npm run analyze:complexity -- --json > complexity.json || true
          
      - name: Collect Performance Metrics
        id: performance-metrics
        run: |
          echo "‚ö° Collecting performance metrics..."
          
          # Run benchmarks for each module
          for module in M001 M002 M003 M004 M005 M006 M007 M008 M009 M010 M011 M012 M013; do
            if [ -f "benchmarks/$module/*.bench.ts" ]; then
              npm run module:${module,,}:bench 2>/dev/null || true
            fi
          done
          
      - name: Collect Security Metrics
        id: security-metrics
        run: |
          echo "üîí Collecting security metrics..."
          
          # Vulnerability count
          npm audit --json > audit.json || true
          vulnerabilities=$(cat audit.json | jq '.metadata.vulnerabilities | add')
          echo "VULNERABILITIES=$vulnerabilities" >> metrics.env
          
          # Security test coverage
          npm run test:security -- --coverage --json > security-coverage.json || true
          
      - name: Calculate Pass Completion
        id: pass-completion
        run: |
          echo "üìà Calculating pass completion..."
          
          completed_passes=0
          total_passes=0
          
          for module in M001 M002 M003 M004 M005 M006 M007 M008 M009 M010 M011 M012 M013; do
            for pass in 0 1 2 3 4 5; do
              total_passes=$((total_passes + 1))
              if [ -f "MODULE_${module}_PASS_${pass}_REPORT.md" ]; then
                completed_passes=$((completed_passes + 1))
              fi
            done
          done
          
          completion_rate=$((completed_passes * 100 / total_passes))
          echo "PASS_COMPLETION=$completion_rate" >> metrics.env
          echo "COMPLETED_PASSES=$completed_passes" >> metrics.env
          echo "TOTAL_PASSES=$total_passes" >> metrics.env
      
      - name: Generate Metrics Report
        run: |
          cat << EOF > METRICS_REPORT.md
          # DevDocAI Development Metrics Dashboard
          
          Generated: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          
          ## üìä Overall Progress
          
          | Metric | Value |
          |--------|-------|
          | Pass Completion | ${PASS_COMPLETION}% |
          | Completed Passes | ${COMPLETED_PASSES}/${TOTAL_PASSES} |
          | Security Vulnerabilities | ${VULNERABILITIES:-0} |
          
          ## üìà Module Progress
          
          | Module | LOC | Coverage | Performance | Status |
          |--------|-----|----------|-------------|--------|
          EOF
          
          for module in M001 M002 M003 M004 M005 M006 M007 M008 M009 M010 M011 M012 M013; do
            loc_var="${module}_LOC"
            loc="${!loc_var:-0}"
            
            # Determine status based on reports
            status="‚è≥ Pending"
            if [ -f "MODULE_${module}_PASS_5_REPORT.md" ]; then
              status="‚úÖ Complete"
            elif [ -f "MODULE_${module}_PASS_4_REPORT.md" ]; then
              status="üîÑ Pass 4"
            elif [ -f "MODULE_${module}_PASS_3_REPORT.md" ]; then
              status="üîí Pass 3"
            elif [ -f "MODULE_${module}_PASS_2_REPORT.md" ]; then
              status="‚ö° Pass 2"
            elif [ -f "MODULE_${module}_PASS_1_REPORT.md" ]; then
              status="üèóÔ∏è Pass 1"
            elif [ -f "MODULE_${module}_DESIGN.md" ]; then
              status="üìê Pass 0"
            fi
            
            echo "| $module | $loc | TBD% | TBD | $status |" >> METRICS_REPORT.md
          done
          
          cat << EOF >> METRICS_REPORT.md
          
          ## üéØ Quality Gates Status
          
          | Gate | Target | Current | Status |
          |------|--------|---------|--------|
          | Code Coverage | 95% | TBD% | ‚è≥ |
          | Performance Gain | 10% | TBD% | ‚è≥ |
          | Security Overhead | <10% | TBD% | ‚è≥ |
          | Code Reduction | 30% | TBD% | ‚è≥ |
          
          ## üìÖ Timeline
          
          - **Project Start:** 2024-01-01
          - **Current Sprint:** Pass Implementation
          - **Estimated Completion:** TBD
          
          ## üîÑ Recent Activity
          
          Last 5 completed passes:
          EOF
          
          # List recent pass completions
          find . -name "MODULE_*_PASS_*_REPORT.md" -type f -exec ls -t {} \; | head -5 | while read file; do
            echo "- $(basename $file .md)" >> METRICS_REPORT.md
          done
      
      - name: Upload Metrics Report
        uses: actions/upload-artifact@v3
        with:
          name: metrics-report-${{ github.run_number }}
          path: METRICS_REPORT.md
      
      - name: Update GitHub Pages Dashboard
        if: github.ref == 'refs/heads/main'
        run: |
          # Create or update dashboard in docs/
          mkdir -p docs/dashboard
          cp METRICS_REPORT.md docs/dashboard/index.md
          
          # Generate HTML dashboard
          npm run generate:dashboard -- \
            --input=METRICS_REPORT.md \
            --output=docs/dashboard/index.html
      
      - name: Send Metrics to Monitoring Service
        if: always()
        env:
          MONITORING_WEBHOOK: ${{ secrets.MONITORING_WEBHOOK }}
        run: |
          if [ -n "$MONITORING_WEBHOOK" ]; then
            curl -X POST "$MONITORING_WEBHOOK" \
              -H "Content-Type: application/json" \
              -d @metrics.json
          fi

  analyze-trends:
    name: Analyze Development Trends
    runs-on: ubuntu-latest
    needs: collect-metrics
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download Historical Metrics
        uses: actions/download-artifact@v3
        with:
          path: historical-metrics/
      
      - name: Analyze Trends
        run: |
          echo "üìà Analyzing development trends..."
          
          # Calculate velocity
          # Compare with previous metrics
          # Identify bottlenecks
          # Predict completion dates
          
          npm run analyze:trends -- \
            --input=historical-metrics/ \
            --output=TRENDS_REPORT.md
      
      - name: Generate Predictions
        run: |
          echo "üîÆ Generating predictions..."
          
          # Based on current velocity
          # Estimate completion dates
          # Identify risks
          
          npm run predict:completion -- \
            --metrics=historical-metrics/ \
            --output=PREDICTIONS.md
      
      - name: Upload Analysis Reports
        uses: actions/upload-artifact@v3
        with:
          name: analysis-reports-${{ github.run_number }}
          path: |
            TRENDS_REPORT.md
            PREDICTIONS.md

  alert-on-issues:
    name: Alert on Quality Issues
    runs-on: ubuntu-latest
    needs: collect-metrics
    if: always()
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Check Quality Gates
        id: quality-check
        run: |
          echo "üö® Checking quality gates..."
          
          # Load quality gates configuration
          # Compare with current metrics
          # Identify violations
          
          violations=""
          
          # Check coverage
          if [ "$COVERAGE" -lt "80" ]; then
            violations="${violations}‚ùå Coverage below 80%\n"
          fi
          
          # Check vulnerabilities
          if [ "$VULNERABILITIES" -gt "0" ]; then
            violations="${violations}‚ùå Security vulnerabilities detected\n"
          fi
          
          # Check performance
          # Check complexity
          # etc.
          
          if [ -n "$violations" ]; then
            echo "has_violations=true" >> $GITHUB_OUTPUT
            echo -e "$violations" > VIOLATIONS.md
          else
            echo "has_violations=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Create Issue for Violations
        if: steps.quality-check.outputs.has_violations == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const violations = fs.readFileSync('VIOLATIONS.md', 'utf8');
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'üö® Quality Gate Violations Detected',
              body: `## Quality Gate Violations\n\n${violations}\n\n[View Full Report](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})`,
              labels: ['quality-gate', 'automated']
            });
      
      - name: Send Alerts
        if: steps.quality-check.outputs.has_violations == 'true'
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        run: |
          if [ -n "$SLACK_WEBHOOK" ]; then
            curl -X POST "$SLACK_WEBHOOK" \
              -H "Content-Type: application/json" \
              -d '{
                "text": "üö® Quality Gate Violations Detected",
                "attachments": [{
                  "color": "danger",
                  "text": "'"$(cat VIOLATIONS.md)"'"
                }]
              }'
          fi