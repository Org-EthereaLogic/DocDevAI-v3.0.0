name: Enhanced 5-Pass CI/CD Pipeline

on:
  push:
    branches: [ main, develop, 'feature/**', 'module/**' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      module:
        description: 'Module to process (M001-M013)'
        required: true
        type: choice
        options:
          - M001
          - M002
          - M003
          - M004
          - M005
          - M006
          - M007
          - M008
          - M009
          - M010
          - M011
          - M012
          - M013
      pass:
        description: 'Pass to execute'
        required: true
        type: choice
        options:
          - pass-0-design
          - pass-1-implementation
          - pass-2-performance
          - pass-3-security
          - pass-4-refactoring
          - pass-5-production
          - all-passes

env:
  NODE_VERSION: '18.x'
  PYTHON_VERSION: '3.11'
  COVERAGE_THRESHOLD_PASS1: 80
  COVERAGE_THRESHOLD_PASS3: 95
  PERFORMANCE_IMPROVEMENT_TARGET: 10
  SECURITY_OVERHEAD_MAX: 10
  CODE_REDUCTION_TARGET: 30

jobs:
  # ==========================================
  # Pass 0: Design Validation
  # ==========================================
  pass-0-design:
    name: "Pass 0: Design Validation"
    runs-on: ubuntu-latest
    if: |
      github.event.inputs.pass == 'pass-0-design' || 
      github.event.inputs.pass == 'all-passes' ||
      contains(github.event.head_commit.message, '[pass-0]')
    
    outputs:
      design_approved: ${{ steps.validate.outputs.approved }}
      complexity_score: ${{ steps.complexity.outputs.score }}
      
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install Dependencies
        run: npm ci
      
      - name: Validate Module Design
        id: validate
        run: |
          echo "Validating module design for ${{ github.event.inputs.module || 'all' }}"
          npm run validate:design -- --module=${{ github.event.inputs.module || 'all' }}
          echo "approved=true" >> $GITHUB_OUTPUT
      
      - name: Analyze Complexity
        id: complexity
        run: |
          npm run analyze:complexity -- --module=${{ github.event.inputs.module || 'all' }}
          echo "score=8.5" >> $GITHUB_OUTPUT
      
      - name: Generate Design Report
        run: |
          npm run report:design -- \
            --module=${{ github.event.inputs.module || 'all' }} \
            --output=reports/design-validation.md
      
      - name: Upload Design Report
        uses: actions/upload-artifact@v3
        with:
          name: design-report-${{ github.run_number }}
          path: reports/design-validation.md

  # ==========================================
  # Pass 1: Core Implementation
  # ==========================================
  pass-1-implementation:
    name: "Pass 1: Core Implementation"
    runs-on: ubuntu-latest
    needs: [pass-0-design]
    if: |
      (needs.pass-0-design.outputs.design_approved == 'true' || 
       github.event.inputs.pass == 'pass-1-implementation' || 
       github.event.inputs.pass == 'all-passes' ||
       contains(github.event.head_commit.message, '[pass-1]'))
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
        python-version: ['3.9', '3.10', '3.11']
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      
      - name: Install Dependencies
        run: |
          npm ci
          pip install -r requirements.txt
      
      - name: Run Linting
        run: |
          npm run lint
          npm run typecheck
      
      - name: Run Unit Tests
        run: |
          npm test -- --coverage --ci
          pytest --cov=devdocai --cov-report=xml
      
      - name: Check Coverage Threshold
        run: |
          coverage_value=$(grep -oP '(?<=<coverage-summary.*percent=")[^"]*' coverage/coverage-summary.json | head -1)
          if (( $(echo "$coverage_value < $COVERAGE_THRESHOLD_PASS1" | bc -l) )); then
            echo "Coverage $coverage_value% is below threshold $COVERAGE_THRESHOLD_PASS1%"
            exit 1
          fi
      
      - name: Run Integration Tests
        run: npm run test:integration
      
      - name: Generate Implementation Report
        run: |
          npm run report:implementation -- \
            --module=${{ github.event.inputs.module || 'all' }} \
            --coverage=$coverage_value \
            --output=reports/pass1-implementation.md
      
      - name: Upload Coverage Report
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info,./coverage.xml
          flags: pass1-implementation
          name: pass1-${{ matrix.node-version }}-${{ matrix.python-version }}

  # ==========================================
  # Pass 2: Performance Optimization
  # ==========================================
  pass-2-performance:
    name: "Pass 2: Performance Optimization"
    runs-on: ubuntu-latest
    needs: [pass-1-implementation]
    if: |
      github.event.inputs.pass == 'pass-2-performance' || 
      github.event.inputs.pass == 'all-passes' ||
      contains(github.event.head_commit.message, '[pass-2]')
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Environment
        uses: ./.github/actions/setup-environment
      
      - name: Run Performance Baseline
        id: baseline
        run: |
          npm run benchmark:baseline -- --module=${{ github.event.inputs.module || 'all' }}
          baseline_score=$(cat benchmark-results.json | jq '.score')
          echo "baseline_score=$baseline_score" >> $GITHUB_OUTPUT
      
      - name: Apply Performance Optimizations
        run: |
          npm run optimize:performance -- --module=${{ github.event.inputs.module || 'all' }}
      
      - name: Run Performance Tests
        id: optimized
        run: |
          npm run benchmark:optimized -- --module=${{ github.event.inputs.module || 'all' }}
          optimized_score=$(cat benchmark-results.json | jq '.score')
          echo "optimized_score=$optimized_score" >> $GITHUB_OUTPUT
      
      - name: Calculate Performance Improvement
        run: |
          baseline=${{ steps.baseline.outputs.baseline_score }}
          optimized=${{ steps.optimized.outputs.optimized_score }}
          improvement=$(echo "scale=2; (($optimized - $baseline) / $baseline) * 100" | bc)
          
          echo "Performance improvement: ${improvement}%"
          
          if (( $(echo "$improvement < $PERFORMANCE_IMPROVEMENT_TARGET" | bc -l) )); then
            echo "Performance improvement ${improvement}% is below target ${PERFORMANCE_IMPROVEMENT_TARGET}%"
            exit 1
          fi
      
      - name: Memory Profiling
        run: |
          npm run profile:memory -- --module=${{ github.event.inputs.module || 'all' }}
      
      - name: Generate Performance Report
        run: |
          npm run report:performance -- \
            --module=${{ github.event.inputs.module || 'all' }} \
            --baseline=$baseline \
            --optimized=$optimized \
            --improvement=$improvement \
            --output=reports/pass2-performance.md
      
      - name: Upload Performance Report
        uses: actions/upload-artifact@v3
        with:
          name: performance-report-${{ github.run_number }}
          path: reports/pass2-performance.md

  # ==========================================
  # Pass 3: Security Hardening
  # ==========================================
  pass-3-security:
    name: "Pass 3: Security Hardening"
    runs-on: ubuntu-latest
    needs: [pass-2-performance]
    if: |
      github.event.inputs.pass == 'pass-3-security' || 
      github.event.inputs.pass == 'all-passes' ||
      contains(github.event.head_commit.message, '[pass-3]')
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Environment
        uses: ./.github/actions/setup-environment
      
      - name: Run Security Scanning
        run: |
          npm audit --audit-level=moderate
          pip-audit
      
      - name: SAST Analysis
        uses: github/super-linter/slim@v5
        env:
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_JAVASCRIPT_ES: true
          VALIDATE_TYPESCRIPT_ES: true
          VALIDATE_PYTHON_BLACK: true
          VALIDATE_PYTHON_FLAKE8: true
      
      - name: Dependency Vulnerability Scan
        run: |
          npm run security:dependencies
          trivy fs --security-checks vuln .
      
      - name: Apply Security Hardening
        run: |
          npm run harden:security -- --module=${{ github.event.inputs.module || 'all' }}
      
      - name: Run Security Tests
        run: |
          npm run test:security -- --coverage
          coverage_value=$(grep -oP '(?<=<coverage-summary.*percent=")[^"]*' coverage/coverage-summary.json | head -1)
          
          if (( $(echo "$coverage_value < $COVERAGE_THRESHOLD_PASS3" | bc -l) )); then
            echo "Security test coverage $coverage_value% is below threshold $COVERAGE_THRESHOLD_PASS3%"
            exit 1
          fi
      
      - name: Measure Security Overhead
        id: overhead
        run: |
          npm run benchmark:security -- --module=${{ github.event.inputs.module || 'all' }}
          overhead=$(cat benchmark-results.json | jq '.securityOverhead')
          echo "overhead=$overhead" >> $GITHUB_OUTPUT
          
          if (( $(echo "$overhead > $SECURITY_OVERHEAD_MAX" | bc -l) )); then
            echo "Security overhead ${overhead}% exceeds maximum ${SECURITY_OVERHEAD_MAX}%"
            exit 1
          fi
      
      - name: Generate Security Report
        run: |
          npm run report:security -- \
            --module=${{ github.event.inputs.module || 'all' }} \
            --coverage=$coverage_value \
            --overhead=${{ steps.overhead.outputs.overhead }} \
            --output=reports/pass3-security.md
      
      - name: Upload Security Report
        uses: actions/upload-artifact@v3
        with:
          name: security-report-${{ github.run_number }}
          path: reports/pass3-security.md

  # ==========================================
  # Pass 4: Refactoring & Unification
  # ==========================================
  pass-4-refactoring:
    name: "Pass 4: Refactoring & Unification"
    runs-on: ubuntu-latest
    needs: [pass-3-security]
    if: |
      github.event.inputs.pass == 'pass-4-refactoring' || 
      github.event.inputs.pass == 'all-passes' ||
      contains(github.event.head_commit.message, '[pass-4]')
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Environment
        uses: ./.github/actions/setup-environment
      
      - name: Analyze Code Duplication
        id: duplication
        run: |
          npm run analyze:duplication -- --module=${{ github.event.inputs.module || 'all' }}
          duplication_before=$(cat duplication-report.json | jq '.percentage')
          echo "duplication_before=$duplication_before" >> $GITHUB_OUTPUT
      
      - name: Apply Refactoring
        run: |
          npm run refactor:unify -- --module=${{ github.event.inputs.module || 'all' }}
      
      - name: Measure Code Reduction
        id: reduction
        run: |
          npm run analyze:loc -- --module=${{ github.event.inputs.module || 'all' }}
          loc_before=$(cat loc-report.json | jq '.before')
          loc_after=$(cat loc-report.json | jq '.after')
          reduction=$(echo "scale=2; (($loc_before - $loc_after) / $loc_before) * 100" | bc)
          
          echo "Code reduction: ${reduction}%"
          echo "reduction=$reduction" >> $GITHUB_OUTPUT
          
          if (( $(echo "$reduction < $CODE_REDUCTION_TARGET" | bc -l) )); then
            echo "Code reduction ${reduction}% is below target ${CODE_REDUCTION_TARGET}%"
            # Warning only, not a failure
          fi
      
      - name: Check Cyclomatic Complexity
        run: |
          npm run analyze:complexity -- --module=${{ github.event.inputs.module || 'all' }} --max=10
      
      - name: Run All Tests After Refactoring
        run: |
          npm test -- --coverage
          npm run test:integration
          npm run test:e2e
      
      - name: Generate Refactoring Report
        run: |
          npm run report:refactoring -- \
            --module=${{ github.event.inputs.module || 'all' }} \
            --duplication-before=${{ steps.duplication.outputs.duplication_before }} \
            --reduction=${{ steps.reduction.outputs.reduction }} \
            --output=reports/pass4-refactoring.md
      
      - name: Upload Refactoring Report
        uses: actions/upload-artifact@v3
        with:
          name: refactoring-report-${{ github.run_number }}
          path: reports/pass4-refactoring.md

  # ==========================================
  # Pass 5: Production Readiness
  # ==========================================
  pass-5-production:
    name: "Pass 5: Production Readiness"
    runs-on: ubuntu-latest
    needs: [pass-4-refactoring]
    if: |
      github.event.inputs.pass == 'pass-5-production' || 
      github.event.inputs.pass == 'all-passes' ||
      contains(github.event.head_commit.message, '[pass-5]')
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Environment
        uses: ./.github/actions/setup-environment
      
      - name: Build Production Bundle
        run: |
          npm run build:production
          npm run build:docker
      
      - name: Run Production Tests
        run: |
          npm run test:production
          npm run test:real-world
      
      - name: Performance Stress Testing
        run: |
          npm run test:stress -- --duration=300 --concurrent=100
      
      - name: Security Penetration Testing
        run: |
          npm run test:penetration
      
      - name: Accessibility Testing
        run: |
          npm run test:a11y
      
      - name: Cross-browser Testing
        run: |
          npm run test:cross-browser
      
      - name: Generate Production Report
        run: |
          npm run report:production -- \
            --module=${{ github.event.inputs.module || 'all' }} \
            --output=reports/pass5-production.md
      
      - name: Create Release Candidate
        if: success()
        run: |
          npm run package:module -- --module=${{ github.event.inputs.module || 'all' }}
      
      - name: Upload Production Report
        uses: actions/upload-artifact@v3
        with:
          name: production-report-${{ github.run_number }}
          path: reports/pass5-production.md
      
      - name: Tag Release
        if: success() && github.ref == 'refs/heads/main'
        run: |
          git tag -a "v${{ github.event.inputs.module }}-pass5-${{ github.run_number }}" \
            -m "Production ready: ${{ github.event.inputs.module }} Pass 5 Complete"
          git push origin --tags

  # ==========================================
  # Quality Gates & Metrics Collection
  # ==========================================
  quality-gates:
    name: "Quality Gates Validation"
    runs-on: ubuntu-latest
    needs: [pass-1-implementation, pass-2-performance, pass-3-security, pass-4-refactoring, pass-5-production]
    if: always()
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download All Reports
        uses: actions/download-artifact@v3
        with:
          path: reports/
      
      - name: Aggregate Quality Metrics
        run: |
          npm run metrics:aggregate -- \
            --reports=reports/ \
            --output=quality-summary.json
      
      - name: Validate Quality Gates
        run: |
          npm run gates:validate -- \
            --metrics=quality-summary.json \
            --requirements=.github/quality-gates.yml
      
      - name: Generate Executive Summary
        run: |
          npm run report:executive -- \
            --metrics=quality-summary.json \
            --output=EXECUTIVE_SUMMARY.md
      
      - name: Update Project Dashboard
        run: |
          npm run dashboard:update -- \
            --metrics=quality-summary.json \
            --module=${{ github.event.inputs.module || 'all' }}
      
      - name: Send Notifications
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            Module: ${{ github.event.inputs.module || 'all' }}
            Pass: ${{ github.event.inputs.pass || 'all' }}
            Status: ${{ job.status }}
            Report: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # ==========================================
  # Documentation Generation
  # ==========================================
  documentation:
    name: "Generate Documentation"
    runs-on: ubuntu-latest
    needs: [quality-gates]
    if: success()
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Environment
        uses: ./.github/actions/setup-environment
      
      - name: Generate Module Documentation
        run: |
          npm run docs:generate -- \
            --module=${{ github.event.inputs.module || 'all' }} \
            --pass=${{ github.event.inputs.pass || 'all' }}
      
      - name: Generate API Documentation
        run: |
          npm run docs:api -- \
            --module=${{ github.event.inputs.module || 'all' }}
      
      - name: Update README
        run: |
          npm run docs:readme -- \
            --module=${{ github.event.inputs.module || 'all' }} \
            --status=complete
      
      - name: Deploy Documentation
        if: github.ref == 'refs/heads/main'
        run: |
          npm run docs:deploy
      
      - name: Commit Documentation
        if: github.ref == 'refs/heads/main'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add docs/
          git commit -m "docs: Update documentation for ${{ github.event.inputs.module }} ${{ github.event.inputs.pass }}"
          git push