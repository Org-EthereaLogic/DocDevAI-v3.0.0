[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "devdocai"
version = "3.0.0"
description = "AI-powered documentation generation and analysis system for solo developers"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "DevDocAI Team", email = "team@devdocai.com"},
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Software Development :: Documentation",
    "Topic :: Text Processing :: Markup",
]
requires-python = ">=3.8"
dependencies = [
    # Core
    "sqlalchemy>=2.0.0",
    "cryptography>=41.0.0",
    "click>=8.1.0",
    "pydantic>=2.0.0",
    "pyyaml>=6.0",
    
    # AI/ML
    "openai>=1.0.0",
    "anthropic>=0.25.0",
    "google-generativeai>=0.5.0",
    "numpy>=1.24.0",
    "scipy>=1.10.0",
    "scikit-learn>=1.3.0",
    
    # Security
    "argon2-cffi>=23.0.0",
    "python-jose>=3.3.0",
    
    # Development
    "python-dotenv>=1.0.0",
    "rich>=13.0.0",
    "typer>=0.9.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.11.0",
    
    # Code Quality
    "black>=23.0.0",
    "pylint>=2.17.0",
    "mypy>=1.5.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    
    # Security
    "bandit>=1.7.0",
    "safety>=3.0.0",
    "pip-audit>=2.6.0",
    
    # Documentation
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.3.0",
]

[project.scripts]
devdocai = "devdocai.cli:main"

[project.urls]
Homepage = "https://github.com/Org-EthereaLogic/DocDevAI-v3.0.0"
Repository = "https://github.com/Org-EthereaLogic/DocDevAI-v3.0.0"
Issues = "https://github.com/Org-EthereaLogic/DocDevAI-v3.0.0/issues"

[tool.setuptools.packages.find]
where = ["."]
include = ["devdocai*"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--cov=devdocai",
    "--cov-report=html",
    "--cov-report=term-missing",
    "--cov-fail-under=80",
    "-v",
]

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["devdocai"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.coverage.run]
source = ["devdocai"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
]