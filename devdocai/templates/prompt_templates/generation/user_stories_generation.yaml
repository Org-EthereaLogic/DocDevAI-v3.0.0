name: "User Stories Generation"
description: "Generate comprehensive user stories from initial project description"
category: "generation"
version: "1.0.0"

# Define what inputs this template needs
inputs:
  - name: "initial_description"
    type: "string"
    required: true
    description: "The initial project description or requirements"
    
  - name: "project_name"
    type: "string"
    required: false
    default: "Project"
    description: "Name of the project"
    
  - name: "target_users"
    type: "string"
    required: false
    default: "end users"
    description: "Target user groups for the system"

# LLM configuration for multi-provider synthesis
llm_config:
  providers:
    - name: "claude"
      weight: 0.4
      model: "claude-3-opus-20240229"
    - name: "openai"
      weight: 0.35
      model: "gpt-4-turbo-preview"
    - name: "google"
      weight: 0.25
      model: "gemini-pro"
  
  temperature: 0.8
  max_tokens: 6000

# The actual prompt template
prompt:
  system: |
    You are an expert Product Manager and Agile Coach specializing in writing 
    comprehensive, clear, and actionable user stories. You excel at understanding 
    business requirements and translating them into well-structured user stories 
    that follow best practices and industry standards.
    
    Your user stories follow the standard format:
    "As a [type of user], I want [goal] so that [benefit]"
    
    Each user story includes:
    - Clear acceptance criteria
    - Priority level (Must Have, Should Have, Could Have, Won't Have)
    - Estimated complexity (Small, Medium, Large, Extra Large)
    - Dependencies on other stories
    - Technical notes when relevant
  
  user: |
    Based on the following project description for {{project_name}}, generate a comprehensive 
    set of user stories that capture all functional and non-functional requirements:
    
    <project_description>
    {{initial_description}}
    </project_description>
    
    {% if target_users %}
    Target Users: {{target_users}}
    {% endif %}
    
    Please generate user stories following these guidelines:
    
    1. **Coverage**: Ensure complete coverage of all features mentioned or implied in the description
    2. **Organization**: Group stories by epic or feature area
    3. **Detail Level**: Provide enough detail for developers to understand and implement
    4. **User Perspective**: Always write from the user's perspective, not technical implementation
    5. **Value Focus**: Each story should deliver clear value to the user
    6. **INVEST Criteria**: Stories should be Independent, Negotiable, Valuable, Estimable, Small, Testable
    
    Structure your output as follows:
    
    <user_stories>
    ## Epic: [Epic Name]
    
    ### US-001: [Story Title]
    **As a** [user type]
    **I want** [functionality]
    **So that** [benefit]
    
    **Acceptance Criteria:**
    - [ ] Criterion 1
    - [ ] Criterion 2
    - [ ] Criterion 3
    
    **Priority:** Must Have/Should Have/Could Have
    **Complexity:** Small/Medium/Large/XL
    **Dependencies:** None or [US-XXX]
    **Technical Notes:** (if applicable)
    
    ---
    
    (Continue with all user stories...)
    </user_stories>
    
    <story_summary>
    Provide a summary including:
    - Total number of stories
    - Distribution by priority
    - Distribution by complexity
    - Key epics identified
    - Suggested implementation order
    </story_summary>
    
    <coverage_analysis>
    Analyze coverage of the original requirements:
    - Features fully covered
    - Features partially covered
    - Implied features discovered
    - Potential gaps or ambiguities
    </coverage_analysis>

# Output processing configuration
output:
  format: "structured"
  sections:
    - name: "user_stories"
      type: "document"
      extract_tag: "user_stories"
      save_as: "user_stories.md"
      
    - name: "story_summary"
      type: "analysis"
      extract_tag: "story_summary"
      
    - name: "coverage_analysis"
      type: "analysis"
      extract_tag: "coverage_analysis"

# MIAIR optimization settings
miair_config:
  enabled: true
  target_quality: 0.80
  max_iterations: 3
  focus_areas:
    - "completeness"
    - "clarity"
    - "consistency"
    - "actionability"