# CI/CD Pipeline Configuration Template
# Generated by DevDocAI v3.0.0

name: {{pipeline_name}}
description: {{pipeline_description}}

# Pipeline triggers
triggers:
  push:
    branches:
      - main
      - develop
      - 'feature/**'
  pull_request:
    branches:
      - main
      - develop
  schedule:
    - cron: '{{cron_schedule|default:0 0 * * *}}'

# Environment variables
environment:
  NODE_VERSION: '{{node_version|default:18}}'
  PYTHON_VERSION: '{{python_version|default:3.11}}'
  DOCKER_REGISTRY: '{{docker_registry}}'
  DEPLOYMENT_ENV: '{{deployment_env|default:staging}}'

# Pipeline stages
stages:
  - name: build
    displayName: 'Build and Compile'
    jobs:
      - job: compile
        steps:
          - name: checkout
            uses: actions/checkout@v3
            
          - name: setup-runtime
            uses: actions/setup-{{runtime_type}}@v3
            with:
              {{runtime_type}}-version: ${{ env.{{runtime_type|upper}}_VERSION }}
              
          - name: install-dependencies
            run: |
              {{install_command|default:npm install}}
              
          - name: build
            run: |
              {{build_command|default:npm run build}}
              
          - name: upload-artifacts
            uses: actions/upload-artifact@v3
            with:
              name: build-artifacts
              path: {{artifact_path|default:dist/}}

  - name: test
    displayName: 'Testing and Quality'
    needs: build
    jobs:
      - job: unit-tests
        steps:
          - name: download-artifacts
            uses: actions/download-artifact@v3
            
          - name: run-unit-tests
            run: |
              {{test_command|default:npm test}}
              
          - name: coverage-report
            run: |
              {{coverage_command|default:npm run test:coverage}}
              
          - name: upload-coverage
            uses: codecov/codecov-action@v3
            with:
              token: ${{ secrets.CODECOV_TOKEN }}
              
      - job: integration-tests
        if: '{{enable_integration_tests|default:true}}'
        steps:
          - name: run-integration-tests
            run: |
              {{integration_test_command}}
              
      - job: security-scan
        steps:
          - name: dependency-check
            run: |
              {{security_scan_command|default:npm audit}}
              
          - name: code-scanning
            uses: github/codeql-action/analyze@v2

  - name: quality
    displayName: 'Code Quality Checks'
    needs: build
    jobs:
      - job: linting
        steps:
          - name: lint-code
            run: |
              {{lint_command|default:npm run lint}}
              
      - job: type-checking
        if: '{{enable_type_checking|default:true}}'
        steps:
          - name: type-check
            run: |
              {{type_check_command|default:npm run type-check}}

  - name: docker
    displayName: 'Container Build'
    needs: [test, quality]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    jobs:
      - job: build-container
        steps:
          - name: setup-docker
            uses: docker/setup-buildx-action@v2
            
          - name: login-registry
            uses: docker/login-action@v2
            with:
              registry: ${{ env.DOCKER_REGISTRY }}
              username: ${{ secrets.DOCKER_USERNAME }}
              password: ${{ secrets.DOCKER_PASSWORD }}
              
          - name: build-and-push
            uses: docker/build-push-action@v4
            with:
              context: .
              push: true
              tags: |
                ${{ env.DOCKER_REGISTRY }}/{{image_name}}:${{ github.sha }}
                ${{ env.DOCKER_REGISTRY }}/{{image_name}}:latest

  - name: deploy
    displayName: 'Deployment'
    needs: docker
    if: github.ref == 'refs/heads/main'
    jobs:
      - job: deploy-staging
        environment:
          name: staging
          url: '{{staging_url}}'
        steps:
          - name: deploy-to-staging
            run: |
              {{deploy_staging_command}}
              
      - job: deploy-production
        if: '{{enable_auto_production|default:false}}'
        environment:
          name: production
          url: '{{production_url}}'
        needs: deploy-staging
        steps:
          - name: deploy-to-production
            run: |
              {{deploy_production_command}}

# Notification settings
notifications:
  - type: email
    recipients: '{{notification_emails}}'
    on:
      - failure
      - success
  - type: slack
    webhook: ${{ secrets.SLACK_WEBHOOK }}
    channel: '{{slack_channel|default:#deployments}}'
    on:
      - failure

# Pipeline metadata
metadata:
  version: '1.0.0'
  owner: '{{team_name}}'
  documentation: '{{docs_url}}'
  support: '{{support_email}}'