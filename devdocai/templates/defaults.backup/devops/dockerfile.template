# Dockerfile Template
# Generated by DevDocAI v3.0.0
# Application: {{application_name}}
# Description: {{application_description}}

# Build stage
FROM {{base_image|default:node:18-alpine}} AS builder

# Set working directory
WORKDIR /app

# Install system dependencies
RUN apk add --no-cache \
    {{system_dependencies|default:git curl}}

# Copy dependency files
COPY {{dependency_files|default:package*.json}} ./

# Install dependencies
RUN {{install_command|default:npm ci --only=production}}

# Copy application source
COPY . .

# Build application
RUN {{build_command|default:npm run build}}

# Production stage
FROM {{production_image|default:node:18-alpine}} AS production

# Install dumb-init for proper signal handling
RUN apk add --no-cache dumb-init

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001

# Set working directory
WORKDIR /app

# Copy built application from builder stage
COPY --from=builder --chown=nodejs:nodejs /app/{{dist_directory|default:dist}} ./dist
COPY --from=builder --chown=nodejs:nodejs /app/node_modules ./node_modules
COPY --from=builder --chown=nodejs:nodejs /app/package*.json ./

# Set environment variables
ENV NODE_ENV={{node_env|default:production}} \
    PORT={{port|default:3000}} \
    {{additional_env_vars}}

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD {{health_check_command|default:node healthcheck.js || exit 1}}

# Switch to non-root user
USER nodejs

# Expose port
EXPOSE {{port|default:3000}}

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]

# Start application
CMD ["{{start_command|default:node dist/index.js}}"]

# Labels for metadata
LABEL maintainer="{{maintainer_email}}" \
      version="{{version|default:1.0.0}}" \
      description="{{application_description}}" \
      org.opencontainers.image.source="{{repository_url}}" \
      org.opencontainers.image.vendor="{{organization_name}}" \
      org.opencontainers.image.licenses="{{license|default:MIT}}"